#!/bin/bash

if [ -z "$1" ]
then
	echo "Class names not specified"
	exit 1
fi

mkdir -p src inc

unset CPPTPROJNAME

unset VERBOSE_CONSTRUCTORS

unset OVERWRITECPPT

HELP_MSG=':cpptemplate by XEDGit: 

Usage:
	./cpptemplate <flags> <classname 1> [<classname n...>]

Flags:

-v OR --verbose: Adds outputs on std::cout when classes get contructed, copied or destroyed

-n OR --name : Sets $(NAME) variable in Makefile to <value>

--overwrite: overwrites Makefile and classes files .cpp and .hpp with new empty version

-argv: add int argc, char **argv to main.cpp

-W: add flags -Wall -Werror -Wextra to Makefile for compilation

--clean: removes folders inc obj src Makefile'

includes=()

for (( i=1; i<=$#; i++))
do
	var="${!i}"
	case "$var" in
		"-v" | "--verbose")
			VERBOSE_CONSTRUCTORS="YES"
			continue
		;;

		"-n" | "--name")
			i=$((i+1))
			CPPTPROJNAME=${!i}
			continue
		;;

		"--overwrite")
			OVERWRITECPPT="YES"
			continue
		;;

		"-argv")
			CPPTARGV="int argc, char **argv"
			continue
		;;

		"-W")
			CPPTSTRICT="-Wall -Werror -Wextra"
			continue
		;;

		"--clean")
			rm -rfv inc obj src Makefile
			exit 0
		;;

		"-h" | "--help")
			CPPT_TMP=$(which less) && ([ -n "$CPPT_TMP" ] && printf "$HELP_MSG" | less) || echo $HELP_MSG
			exit 0
		;;
	esac

	includes+=($var)

	caps=$(echo $var | tr 'a-z' 'A-Z')

	if [ -n "$OVERWRITECPPT" ] || ! [ -f "inc/${var}.hpp" ]
	then
		echo "#ifndef ${caps}_HPP
# define ${caps}_HPP

class ${var}
{
	private:
	public:
				$var(void);
				~$var();
				$var(const $var &old);
		$var&   operator=(const $var &old);
};

#endif" > inc/$var.hpp
	fi

	if [ -n "$OVERWRITECPPT" ] || ! [ -f "src/${var}.cpp" ]
	then
		echo "#include <$var.hpp>

$var::$var(void)
{" > src/$var.cpp
	if [ -n "$VERBOSE_CONSTRUCTORS" ]
	then
			echo "	std::cout << \"Default constructor called on $var\" << std::endl;" >> src/$var.cpp
	fi
	echo "}

$var::$var(const $var &old)
{" >> src/$var.cpp
	if [ -n "$VERBOSE_CONSTRUCTORS" ]
	then
			echo "	std::cout << \"Copy constructor called on $var\" << std::endl;" >> src/$var.cpp
	fi
	echo "	*this = old;
}

$var::~$var()
{" >> src/$var.cpp
	if [ -n "$VERBOSE_CONSTRUCTORS" ]
	then
			echo "	std::cout << \"Destructor called on $var\" << std::endl;" >> src/$var.cpp
	fi
	echo "}

$var	&$var::operator =(const $var &old)
{" >> src/$var.cpp
	if [ -n "$VERBOSE_CONSTRUCTORS" ]
	then
			echo "	std::cout << \"Copy assignment operator called on $var\" << std::endl;" >> src/$var.cpp
	fi
	echo "	// TODO
	return *this;
}" >> src/$var.cpp
	fi
done

if [ -n "$OVERWRITECPPT" ] && [ -f "src/main.cpp" ]
then
	mv src/main.cpp src/main.bk.cpp
	for var in ${includes[@]}
	do
		echo "#include <$var.hpp>" >> src/main.cpp
	done
	cat src/main.bk.cpp >> src/main.cpp
	rm src/main.bk.cpp
fi

if ! [ -f "src/main.cpp" ]
then
	for var in ${includes[@]}
	do
		echo "#include <$var.hpp>" >> src/main.cpp
	done
	echo "
int main($CPPTARGV)
{

}" >> src/main.cpp
fi

if [ -n "$OVERWRITECPPT" ] || ! [ -f "Makefile" ]
then

	echo -n 'SRC_DIR := src

INCLUDE := inc

SRC := $(wildcard $(SRC_DIR)/*.cpp)

INC := $(wildcard $(INCLUDE)/*.hpp)

OBJ_DIR := obj

OBJ := $(addprefix $(OBJ_DIR)/, $(notdir $(SRC:.cpp=.o)))

FLAGS := -std=c++98 -I $(INCLUDE)' > Makefile
	echo " $CPPTSTRICT

NAME := $CPPTPROJNAME" >> Makefile
	echo '
$(NAME): $(OBJ) | $(SRC_DIR)
	$(info Compiling executable...)
	$(CXX) $(FLAGS) $^ -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp $(INC) | $(OBJ_DIR)
	$(CXX) $(FLAGS) $< -o $@ -c

$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)

re: fclean $(NAME)

clean:
	rm -rf $(OBJ_DIR)

fclean: clean
	rm -f $(NAME)

rebug: fclean debug

debug: FLAGS  = -std=c++98 -I $(INCLUDE) -g
debug: $(NAME)' >> Makefile
fi


